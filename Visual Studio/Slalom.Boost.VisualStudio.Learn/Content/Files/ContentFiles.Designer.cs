//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Slalom.Boost.Learn.Content.Files {
    using System;
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "4.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public class ContentFiles {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal ContentFiles() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        public static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("Slalom.Boost.Learn.Content.Files.ContentFiles", typeof(ContentFiles).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        public static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;FlowDocument xmlns=&quot;http://schemas.microsoft.com/winfx/2006/xaml/presentation&quot;&gt;
        ///    &lt;Paragraph FontSize=&quot;20&quot;&gt;Task: Add a Command&lt;/Paragraph&gt;
        ///    &lt;Paragraph&gt;
        ///        &lt;Run FontStyle=&quot;Italic&quot;&gt;...&lt;/Run&gt;
        ///    &lt;/Paragraph&gt;
        ///&lt;/FlowDocument&gt;.
        /// </summary>
        public static string AddCommand {
            get {
                return ResourceManager.GetString("AddCommand", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;FlowDocument xmlns=&quot;http://schemas.microsoft.com/winfx/2006/xaml/presentation&quot;&gt;
        ///    &lt;Paragraph FontSize=&quot;20&quot;&gt;Aggregate&lt;/Paragraph&gt;
        ///    &lt;Paragraph LineHeight=&quot;10&quot;&gt;
        ///        &lt;Run&gt;Cluster the entities and value objects into aggregates and define boundaries around each. Choose one entity to be the root of each aggregate, and allow external objects to hold references to the root only (references to internal members passed out for use within a single operation only). Define properties and invariants for the aggre [rest of string was truncated]&quot;;.
        /// </summary>
        public static string Aggregate {
            get {
                return ResourceManager.GetString("Aggregate", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;FlowDocument xmlns=&quot;http://schemas.microsoft.com/winfx/2006/xaml/presentation&quot;&gt;
        ///    &lt;Paragraph FontSize=&quot;20&quot;&gt;Command&lt;/Paragraph&gt;
        ///    &lt;Paragraph LineHeight=&quot;2&quot;&gt;
        ///        &lt;Run&gt;A command is an imperative message that sounds like an explicit request made to the system to have some tasks performed. Here are some other characteristics of a command:&lt;/Run&gt;
        ///    &lt;/Paragraph&gt;
        ///    &lt;List MarkerStyle=&quot;Box&quot; Margin=&quot;0 10 0 0&quot;&gt;
        ///        &lt;ListItem&gt;
        ///            &lt;Paragraph&gt;A command is directed at one handler.&lt;/Paragraph&gt;
        ///  [rest of string was truncated]&quot;;.
        /// </summary>
        public static string Command {
            get {
                return ResourceManager.GetString("Command", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;FlowDocument xmlns=&quot;http://schemas.microsoft.com/winfx/2006/xaml/presentation&quot;&gt;
        ///    &lt;Paragraph FontSize=&quot;20&quot;&gt;Command Handler&lt;/Paragraph&gt;
        ///    &lt;Paragraph LineHeight=&quot;2&quot;&gt;
        ///        &lt;Run&gt;A command is an imperative message that sounds like an explicit request made to the system to have some tasks performed. Here are some other characteristics of a command:&lt;/Run&gt;
        ///    &lt;/Paragraph&gt;
        ///    &lt;List MarkerStyle=&quot;Box&quot; Margin=&quot;0 10 0 0&quot;&gt;
        ///        &lt;ListItem&gt;
        ///            &lt;Paragraph&gt;A command is directed at one handler.&lt;/Parag [rest of string was truncated]&quot;;.
        /// </summary>
        public static string CommandHandler {
            get {
                return ResourceManager.GetString("CommandHandler", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;FlowDocument xmlns=&quot;http://schemas.microsoft.com/winfx/2006/xaml/presentation&quot;&gt;
        ///    &lt;Paragraph FontSize=&quot;20&quot;&gt;Concept (Value Object)&lt;/Paragraph&gt;
        ///    &lt;Paragraph&gt;
        ///        &lt;Run FontStyle=&quot;Italic&quot;&gt;Some objects describe or compute some characteristic of a thing.&lt;/Run&gt;
        ///    &lt;/Paragraph&gt;
        ///    &lt;Paragraph LineHeight=&quot;10&quot;&gt;
        ///        &lt;Run&gt;When you care only about the attributes and logic of an element of the model, classify it as a value object. Make it express the meaning of the attributes it conveys and give it related  [rest of string was truncated]&quot;;.
        /// </summary>
        public static string Concept {
            get {
                return ResourceManager.GetString("Concept", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;FlowDocument xmlns=&quot;http://schemas.microsoft.com/winfx/2006/xaml/presentation&quot;&gt;
        ///    &lt;Paragraph FontSize=&quot;20&quot;&gt;Domain Event&lt;/Paragraph&gt;
        ///    &lt;Paragraph LineHeight=&quot;10&quot;&gt;
        ///        &lt;Run FontStyle=&quot;Italic&quot;&gt;Something happened that domain experts care about.&lt;/Run&gt;
        ///    &lt;/Paragraph&gt;
        ///    &lt;Paragraph LineHeight=&quot;2&quot;&gt;
        ///        &lt;Run&gt;A domain event is a full-fledged part of the domain model, a representation of something that happened in the domain. Ignore irrelevant domain activity while making explicit the events that the [rest of string was truncated]&quot;;.
        /// </summary>
        public static string DomainEvent {
            get {
                return ResourceManager.GetString("DomainEvent", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;FlowDocument xmlns=&quot;http://schemas.microsoft.com/winfx/2006/xaml/presentation&quot;&gt;
        ///    &lt;Paragraph FontSize=&quot;20&quot;&gt;Entity&lt;/Paragraph&gt;
        ///    &lt;Paragraph&gt;
        ///        &lt;Run FontStyle=&quot;Italic&quot;&gt;Many objects represent a thread of continuity and identity, going through a lifecycle, though their attributes may change.&lt;/Run&gt;
        ///    &lt;/Paragraph&gt;
        ///    &lt;Paragraph LineHeight=&quot;10&quot;&gt;
        ///        &lt;Run&gt;Some objects are not defined primarily by their attributes. They represent a thread of identity that runs through time and often across distinct [rest of string was truncated]&quot;;.
        /// </summary>
        public static string Entity {
            get {
                return ResourceManager.GetString("Entity", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;FlowDocument xmlns=&quot;http://schemas.microsoft.com/winfx/2006/xaml/presentation&quot;&gt;
        ///    &lt;Paragraph FontSize=&quot;20&quot;&gt;Welcome&lt;/Paragraph&gt;
        ///    &lt;Paragraph LineHeight=&quot;1&quot; Margin=&quot;0 0 0 10&quot;&gt;
        ///        &lt;TextBlock FontWeight=&quot;Bold&quot;&gt;Elements&lt;/TextBlock&gt;
        ///    &lt;/Paragraph&gt;
        ///    &lt;List&gt;
        ///        &lt;ListItem&gt;
        ///            &lt;Paragraph&gt;
        ///                &lt;Hyperlink NavigateUri=&quot;Entity&quot;&gt;Entity&lt;/Hyperlink&gt;
        ///            &lt;/Paragraph&gt;
        ///        &lt;/ListItem&gt;
        ///        &lt;ListItem&gt;
        ///            &lt;Paragraph&gt;
        ///                &lt;Hyperlink NavigateUri=&quot;DomainE [rest of string was truncated]&quot;;.
        /// </summary>
        public static string Home {
            get {
                return ResourceManager.GetString("Home", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;FlowDocument xmlns=&quot;http://schemas.microsoft.com/winfx/2006/xaml/presentation&quot;&gt;
        ///    &lt;Paragraph FontSize=&quot;20&quot;&gt;Not Found&lt;/Paragraph&gt;
        ///    &lt;Paragraph&gt;
        ///        &lt;Run FontStyle=&quot;Italic&quot;&gt;...&lt;/Run&gt;
        ///    &lt;/Paragraph&gt;
        ///&lt;/FlowDocument&gt;.
        /// </summary>
        public static string NotFound {
            get {
                return ResourceManager.GetString("NotFound", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;FlowDocument xmlns=&quot;http://schemas.microsoft.com/winfx/2006/xaml/presentation&quot;&gt;
        ///    &lt;Paragraph FontSize=&quot;20&quot;&gt;Read Model&lt;/Paragraph&gt;
        ///    &lt;Paragraph LineHeight=&quot;10&quot;&gt;
        ///        &lt;Run&gt;A read model is a model specialized for reads, that is, queries. It takes events produced by the domain and uses them to build and maintain a model that is suitable for answering the client&apos;s queries. It can draw on events from different aggregates and even different types of aggregate. What it does from there is unimportant. It may [rest of string was truncated]&quot;;.
        /// </summary>
        public static string ReadModel {
            get {
                return ResourceManager.GetString("ReadModel", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;FlowDocument xmlns=&quot;http://schemas.microsoft.com/winfx/2006/xaml/presentation&quot;&gt;
        ///    &lt;Paragraph FontSize=&quot;20&quot;&gt;Read Model Synchronizer&lt;/Paragraph&gt;
        ///    &lt;Paragraph LineHeight=&quot;10&quot;&gt;
        ///        &lt;Run&gt;Synchronizes a read model based on events that happen in the domain or when an entity is updated or deleted.&lt;/Run&gt;
        ///    &lt;/Paragraph&gt;
        ///    &lt;Paragraph LineHeight=&quot;1&quot; Margin=&quot;0 20 0 10&quot;&gt;
        ///        &lt;TextBlock FontWeight=&quot;Bold&quot;&gt;Tasks&lt;/TextBlock&gt;
        ///    &lt;/Paragraph&gt;
        ///    &lt;List&gt;
        ///        &lt;ListItem&gt;
        ///            &lt;Paragraph&gt;
        ///             [rest of string was truncated]&quot;;.
        /// </summary>
        public static string Synchronizer {
            get {
                return ResourceManager.GetString("Synchronizer", resourceCulture);
            }
        }
    }
}
