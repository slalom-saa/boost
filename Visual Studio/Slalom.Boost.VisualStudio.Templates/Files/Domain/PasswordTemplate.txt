using System;
using System.Collections.Generic;
using Slalom.Boost.Domain.Concepts;
using Slalom.Boost.Validation;
using System.Text.RegularExpressions;

namespace {{Project.GetModuleName()}}.Domain
{
	// TODO: Add unit tests [Boost]

    /// <summary>
    /// Represents a username value object.
    /// </summary>
    /// <seealso boost="Concept"/>
    public class {{Name}} : ConceptAs<string>
    {
        private static Regex ValidRegex = new Regex("^[a-z0-9_-]{6,18}$", RegexOptions.Compiled);

        public static implicit operator {{Name}}(string value)
        {
            var target = new {{Name}}	 { Value = value };
            target.EnsureValid();
            return target;
        }

        public override IEnumerable<ValidationMessage> Validate()
        {
            if (string.IsNullOrWhiteSpace(this.Value))
            {
                yield return "A password cannot be null or empty.";
				yield break;
            }
            if (!ValidRegex.IsMatch(this.Value))
            {
                yield return "A password must be from 6 to 18 characters and can only contain letters, numbers, underscores and hyphens.";
            }
        }
    }
}